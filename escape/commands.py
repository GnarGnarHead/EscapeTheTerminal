from __future__ import annotations

from typing import Callable, TYPE_CHECKING

if TYPE_CHECKING:  # pragma: no cover - used for type checking only
    from .game import Game

COMMAND_DESCRIPTIONS: dict[str, str] = {
    "help": "Show help for commands",
    "man": "Show a manual page for a command",
    "look": "Describe the current room or a subdirectory",
    "ls": "List items and subdirectories",
    "cd": "Change directory",
    "pwd": "Show current path",
    "take": "Add an item to your inventory",
    "drop": "Remove an item from your inventory",
    "give": "Hand an item to the current NPC",
    "inventory": "List inventory contents",
    "examine": "Examine an item in detail",
    "use": "Use an item, optionally on a target",
    "combine": "Combine two items if a recipe matches",
    "cat": "Display the contents of a file",
    "grep": "Search log files for text",
    "decode": "Decode the mem.fragment",
    "talk": "Speak with an NPC",
    "scan": "Scan a directory for hidden nodes",
    "hack": "Attempt to unlock a node",
    "map": "Display the directory tree",
    "save": "Save game state",
    "load": "Load a saved game",
    "glitch": "Toggle glitch mode",
    "color": "Toggle ANSI color output",
    "prompt": "Change or display the input prompt",
    "history": "Show command history",
    "journal": "View or add personal notes",
    "quest": "List, add or complete quests",
    "sleep": "Enter the dream state and rest",
    "score": "Show your current score",
    "stats": "Show gameplay statistics",
    "achievements": "List unlocked achievements",
    "tutorial": "Guided introduction to core commands",
    "restart": "Restart the game",
    "quit": "Exit the game",
    "alias": "Create command shortcuts",
    "unalias": "Remove a command alias",
    "plugins": "List loaded plugins",
}


def build_command_map(game: "Game") -> dict[str, Callable[[str], bool | None]]:
    """Return the command dispatcher map for ``game``."""
    return {
        "help": lambda arg="": game._print_help(arg.strip()),
        "h": lambda arg="": game._print_help(arg.strip()),
        "man": lambda arg="": game._man(arg),
        "look": lambda arg="": game._look(arg),
        "look around": lambda arg="": game._look(),
        "ls": lambda arg="": game._ls(),
        "pwd": lambda arg="": game._pwd(),
        "cd": lambda arg="": game._cd(arg),
        "take": lambda arg="": game._take(arg),
        "drop": lambda arg="": game._drop(arg),
        "give": lambda arg="": game._give(arg),
        "inventory": lambda arg="": game._inventory(),
        "inv": lambda arg="": game._inventory(),
        "i": lambda arg="": game._inventory(),
        "examine": lambda arg="": game._examine(arg),
        "use": lambda arg="": game._use_command(arg),
        "combine": lambda arg="": game._combine(arg),
        "cat": lambda arg="": game._cat(arg),
        "grep": lambda arg="": game._grep(arg),
        "decode": lambda arg="": game._decode(arg),
        "talk": lambda arg="": game._talk(arg),
        "scan": lambda arg="": game._scan(arg),
        "hack": lambda arg="": game._hack(arg),
        "map": lambda arg="": game._map(),
        "save": lambda arg="": game._save(arg),
        "load": lambda arg="": game._load(arg),
        "glitch": lambda arg="": game._toggle_glitch(),
        "color": lambda arg="": game._color(arg),
        "prompt": lambda arg="": game._prompt(arg),
        "history": lambda arg="": game._history(),
        "journal": lambda arg="": game._journal(arg),
        "quest": lambda arg="": game._quest(arg),
        "sleep": lambda arg="": game._sleep(arg),
        "score": lambda arg="": game._score(),
        "stats": lambda arg="": game._stats(),
        "achievements": lambda arg="": game._achievements(),
        "tutorial": lambda arg="": game._tutorial(),
        "restart": lambda arg="": game._restart(),
        "quit": lambda arg="": game._quit(),
        "exit": lambda arg="": game._quit(),
        "alias": lambda arg="": game._alias(arg),
        "unalias": lambda arg="": game._unalias(arg),
        "plugins": lambda arg="": game._plugins(),
    }
